/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 07 10:21:19 GMT 2024
 */

package org.example;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.example.Calculator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Calculator_ESTest extends Calculator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      double double0 = calculator0.subtract(1485.3389284286302, (-3412.77680711));
      assertEquals(4898.11573553863, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      double double0 = calculator0.subtract((-1051.3), 465.3492760891592);
      assertEquals((-1516.6492760891592), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      double double0 = calculator0.squareRoot(1.0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      double double0 = calculator0.square(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      double double0 = calculator0.square((-130.926691812));
      assertEquals(17141.79862883443, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      double double0 = calculator0.multiply((-733.65654145), (-733.65654145));
      assertEquals(538251.9208123755, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      double double0 = calculator0.multiply((-1133.3512), 2246.538);
      assertEquals((-2546116.5381456004), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      double double0 = calculator0.divide(0.0, (-778.6233689537123));
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      double double0 = calculator0.divide(2279.0, 2279.0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      double double0 = calculator0.divide((-1443.8298419006874), 1.0);
      assertEquals((-1443.8298419006874), double0, 0.01);
  }

  // no test case with division by 0

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      double double0 = calculator0.add(1.0, 0.0);
      assertEquals(1.0, double0, 0.01);
  }

  // created a test case with wrong semantic
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      double double0 = calculator0.add(1.0, 2627.363080445579);
      assertEquals((-2626.363080445579), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      // Undeclared exception!
      try { 
        calculator0.squareRoot((-2007.86));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // a must not lesser than 0.
         //
         verifyException("org.example.Calculator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      double double0 = calculator0.squareRoot(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      double double0 = calculator0.subtract((-2007.86), (-2007.86));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      double double0 = calculator0.add(0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      double double0 = calculator0.multiply(0.0, (-2007.86));
      assertEquals(-0.0, double0, 0.01);
  }
}
